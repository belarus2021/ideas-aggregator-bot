import Markup from "telegraf/markup";
import WizardScene from "telegraf/scenes/wizard";
import _ from 'lodash';
import {config as dotenv_config} from "dotenv"
import {storeOffer, listMyOffers, listPotentialMatches, updateCity, rejectMatch, acceptMatch} from "./firebaseHelper";
import {
  SELL,
  BYN,
  BUY_USD,
  BUY_EUR,
  SELL_USD,
  SELL_EUR,
  REJECT_MATCH,
  APPROVE_MATCH,
  USD,
  EUR,
  MINSK,
  MAIN_MENU,
  MAIN_MENU_OPTIONS, CITIES_DICT, SUGGEST_NEW_CITY
} from '../constants/appEnums';
import {
  BUY_USD_WORD,
  BUY_EUR_WORD,
  SELL_USD_WORD,
  SELL_EUR_WORD,
  GET_NBRB_EUR_WORD,
  GET_NBRB_USD_WORD,
  CHOOSE_CITY_WORD,
  LIST_POTENTIAL_MATCHES_WORD, LIST_OFFERS_WORD, SUBMIT_OFFER_WORD, FEEDBACK_WORD
} from '../constants/localizedStrings'
import {destructTransType, fetchNBRBRatesUSD, fetchNBRBRatesEUR, formatRate} from "./currencyHelper"
import {getCityWord, getActionPhrase} from "./textHelper"
import {
  asyncForEach, getText,
  goHome, isCBQ,
  isNotValidCB, isNotValidNumber, isValidText,
  readableOffer,
  readableOffers,
  saveUser, sendTgMsgByChannelName,
  sendTgMsgByChatId
} from "./telegramHelper"

dotenv_config()
const {NEWS_TELEGRAM_CHANNEL, ADMIN_GROUP_ID, TECH_SUPPORT_TELEGRAM_GROUP} = process.env;

const generateMainMenu = Markup.keyboard([
  [Markup.callbackButton(SUBMIT_OFFER_WORD)],
  [Markup.callbackButton(LIST_OFFERS_WORD)],
  [Markup.callbackButton(LIST_POTENTIAL_MATCHES_WORD)],
  [Markup.callbackButton(CHOOSE_CITY_WORD)], //(${getCityWord(city) || getCityWord(MINSK)})
  [
    Markup.callbackButton(GET_NBRB_USD_WORD),
    Markup.callbackButton(GET_NBRB_EUR_WORD)
  ],
  [Markup.callbackButton(FEEDBACK_WORD)]
]).oneTime().extra();
const backToMainMenuButton = Markup.callbackButton("–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é ‚¨ÜÔ∏èÔ∏è", MAIN_MENU)
const backToMainMenuKeyboard = Markup.inlineKeyboard([backToMainMenuButton]).extra()

const offersMenu = Markup.inlineKeyboard([
  [
    Markup.callbackButton(`${BUY_USD_WORD} $`, BUY_USD),
    Markup.callbackButton(`${BUY_EUR_WORD} ‚Ç¨`, BUY_EUR)
  ],
  [
    Markup.callbackButton(`${SELL_USD_WORD} $`, SELL_USD),
    Markup.callbackButton(`${SELL_EUR_WORD} ‚Ç¨`, SELL_EUR)
  ]
]).extra();

const removeKeyboardMarkup = Markup.removeKeyboard().extra();
const emptyInlineKeyboard =  Markup.inlineKeyboard([ Markup.callbackButton(`dummy`, 'dummy', true) ]).extra();

const generateMatchKeyboard = ({match, withBack}) => {
  const buttons = [[
    Markup.callbackButton(`‚úÖ`, JSON.stringify({selection: APPROVE_MATCH, offerId: match.id})),
    Markup.callbackButton(`‚ùå`, JSON.stringify({selection: REJECT_MATCH, offerId: match.id}))
    ]]
  if (withBack) buttons.push([backToMainMenuButton])
  return Markup.inlineKeyboard(buttons).extra();
}

const citiesBtnDict = _.chunk(_.map(CITIES_DICT, c => Markup.callbackButton(c.word, c.value)),3)
const addCityButton = Markup.callbackButton('–î–æ–±–∞–≤–∏—Ç—å –º–æ–π –≥–æ—Ä–æ–¥', SUGGEST_NEW_CITY)
const citiesMenu = Markup.inlineKeyboard(citiesBtnDict).extra();
const citiesWithAddCityMenu = Markup.inlineKeyboard(_.concat(citiesBtnDict,[[addCityButton]])).extra();

const getUser = (ctx) => {
 return _.get(ctx.update, 'callback_query.from') || _.get(ctx.update, 'message.from');
}

const getTimestamp = (ctx) => {
 return _.get(ctx.update, 'callback_query.message.date') || _.get(ctx.update, 'message.date') || 0;
}

export const mainMenuMiddleware = async (ctx, next) => {
  const choice = _.get(ctx.update, 'message.text')
  if (_.some(_.map(MAIN_MENU_OPTIONS), m => m === choice)) {
    // is menu click
    const userId = _.get(getUser(ctx),'id');
    switch (choice) {
      case LIST_OFFERS_WORD:
        let offers;
        if (userId) {
          offers = await listMyOffers(userId).catch(e => console.log('listMyOffers', e));
          const offersText = offers && offers.length > 0
            ? readableOffers(offers, getUser(ctx).city || MINSK)
            : "–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ üí∞‚ùå. \n–í—ã–±–µ—Ä–∏—Ç–µ '–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –æ–±–º–µ–Ω' –≤ –º–µ–Ω—é"
          await ctx.reply(`üìù –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫: \n${offersText || ''}`, backToMainMenuKeyboard)
        }
        return ctx.scene.leave()
      case LIST_POTENTIAL_MATCHES_WORD:
        return ctx.scene.enter('matching')
      case SUBMIT_OFFER_WORD:
        return ctx.scene.enter('offer')
      case CHOOSE_CITY_WORD:
        return ctx.scene.enter('choose_city')
      case FEEDBACK_WORD:
        await ctx.reply(`–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å - ${TECH_SUPPORT_TELEGRAM_GROUP}`, backToMainMenuKeyboard)
        return ctx.scene.leave()
      case GET_NBRB_USD_WORD: // fall through.  same as ||
      case GET_NBRB_EUR_WORD:
        const currency = choice === GET_NBRB_USD_WORD ? USD : EUR;
        let rate;
        if (currency === USD) {
          rate = await fetchNBRBRatesUSD().catch(e => console.log('err fetchNBRBRatesUSD', e.code));
        } else if (currency === EUR) {
          rate = await fetchNBRBRatesEUR().catch(e => console.log('err fetchNBRBRatesEUR', e));
        }
        const unavailableText = '–ù–ë–†–ë –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω';
        const text = rate ? `${formatRate(rate)} ${currency}-BYN` : unavailableText
        ctx.reply(text, backToMainMenuKeyboard)
        return ctx.scene.leave();
      default:
        return ctx.scene.leave()
    }
  } else if (choice === MAIN_MENU) {
    console.log("MAIN_MENU")
    ctx.scene.enter('welcome')
  }
  return next()
}

export const welcomeWizard = new WizardScene(
  "welcome",
  async ctx => {
    console.log('welcomeWizard1')
    const user = getUser(ctx);
    if (!user.username) {
      await ctx.reply("–í –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ —Ç–µ–ª–µ–≥—Ä–∞–º–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–∂–Ω–æ –ª–µ–≥–∫–æ " +
        "–¥–æ–±–∞–≤–∏—Ç—å –≤ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' => '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'. –ë–µ–∑ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —è –Ω–µ —Å–º–æ–≥—É —Å–æ–µ–¥–∏–Ω–∏—Ç—å –≤–∞—Å —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —á—Ç–æ–±—ã –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –æ–±–º–µ–Ω—ã")
    } else {
      const timestamp = getTimestamp(ctx);
      await saveUser({user, lastUsed: timestamp}).catch(e => console.log('err saving user', e));
      await ctx.reply("–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å? üê∞", generateMainMenu);
    }
    return ctx.scene.leave()
  })

export const offerWizard = new WizardScene(
  'offer',
  async ctx => {
    console.log('offerWizard1')
    ctx.reply("–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å? üê∞", offersMenu);
    return ctx.wizard.next();
  },
  async ctx => {
    console.log('offerWizard2')
    if (isNotValidCB(ctx)) return goHome(ctx);
    const choice = _.get(ctx.update, 'callback_query.data');
    if (choice) {
      const {currency, action} = destructTransType(choice)
      ctx.wizard.state.currency = currency;
      ctx.wizard.state.action = action;
      if (currency) {
        let phrase = getActionPhrase(choice);
        if (phrase) {
          ctx.reply(
            `–ü–æ–Ω—è—Ç–Ω–æ, ${phrase}. –°–∫–æ–ª—å–∫–æ ${currency}?`
          );
          return ctx.wizard.next();
        }
      }
    }
    return goHome(ctx)
  },
  async ctx => {
    console.log('offerWizard3')
    if (isCBQ(ctx)) return goHome(ctx);
    if (isNotValidNumber(ctx)) {
      ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É. –ù–∞–ø—Ä–∏–º–µ—Ä 150')
      return
    }
    ctx.wizard.state.amount = ctx.message.text;
    const {amount, currency} = ctx.wizard.state;
    ctx.reply(
      `üê∞ –û–∫. ${amount} ${currency}. –ü–æ –∫–∞–∫–æ–º—É –∫—É—Ä—Å—É? (–°–∫–æ–ª—å–∫–æ —Ä—É–±–ª–µ–π –≤—ã –ø—Ä–æ—Å–∏—Ç–µ –∑–∞ –æ–¥–∏–Ω ${currency})`
    );
    return ctx.wizard.next();
  },
  async ctx => {
    console.log('offerWizard4')
    if (isCBQ(ctx)) return goHome(ctx);
    if (isNotValidNumber(ctx)) {
      ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫—É—Ä—Å. –ù–∞–ø—Ä–∏–º–µ—Ä 3.41 ')
      return
    }
    ctx.wizard.state.rate = ctx.message.text;
    const {currency, rate} = ctx.wizard.state;
    ctx.reply(
      `–ü–æ–Ω—è—Ç–Ω–æ. ${formatRate(rate)} ${currency}-${BYN}.\n`
      + `–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—Å—è?`,
      citiesMenu
    );
    return ctx.wizard.next();
  },
  async ctx => {
    console.log('offerWizard5')
    if (isNotValidCB(ctx)) {
      if (isValidText(ctx)) {
        const city = getText(ctx);
        await ctx.reply(`–Ø –ø–æ–ø—ã—Ç–∞—é—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –≥–æ—Ä–æ–¥. –≠—Ç–æ –æ–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ ‚è≥`)
        await addNewCity(city)
      }
      return goHome(ctx);
    }
    ctx.wizard.state.city = ctx.update.callback_query.data;
    const {currency, rate, amount, action, city} = ctx.wizard.state;
    updateCity({city, userId: getUser(ctx).id}).catch(e => console.log('error setting city', e));
    const offer = ctx.wizard.state;
    const user = ctx.update.callback_query.from;
    const cityWord = getCityWord(city);
    const invalid = !amount || !currency || !rate || !cityWord;
    if (!invalid) {
      const timestamp = getTimestamp(ctx);
      storeOffer({user, offer, createdAt: timestamp}).catch(e => console.warn('err in storeOffer', e))
      const partnerWord = action === SELL ? '–ø–æ–∫—É–ø–∞—Ç–µ–ª—è' : '–ø—Ä–æ–¥–∞–≤—Ü–∞';
      const actionWord = action === SELL ? '–ø—Ä–æ–¥–∞—Ç—å' : '–∫—É–ø–∏—Ç—å';
      await ctx.reply(
        `–ò—Ç–∞–∫, –≤—ã –≥–æ—Ç–æ–≤—ã ${actionWord}:\n`
        + `${amount} ${currency} –ø–æ –∫—É—Ä—Å—É ${formatRate(rate)} ${currency}-${BYN} –≤ –≥–æ—Ä–æ–¥–µ ${cityWord}.\n\n`);
      const channelText = `üí∞ "–ì–æ—Ç–æ–≤ ${actionWord} ${amount} ${currency} –ø–æ –∫—É—Ä—Å—É ${formatRate(rate)} ${currency}-${BYN} –≤ –≥. ${cityWord}"`
      await sendTgMsgByChannelName({name: NEWS_TELEGRAM_CHANNEL, message: channelText}).catch(e => console.log('failed sendTgMsgByChannelName', e))
      return ctx.scene.enter("matching");
    }
    ctx.reply(`–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –¥–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å –Ω–∞—á–∞–ª–æ`)
    return ctx.scene.reenter()
  },
  ctx => {
    console.log('offerWizard6')
    goHome(ctx)
  }
);

export const matchingWizard = new WizardScene(
  "matching",
  async ctx => {
    console.log('matchingWizard1')
    await ctx.reply(`üîç...`);
    const {matches} = await listPotentialMatches(getUser(ctx).id).catch(e => {
      console.log('err in listPotentialMatches', e)
      return goHome(ctx)
    });
    ctx.wizard.state.matches = matches;
    const hasMatches = matches && matches.length > 0;
    if (hasMatches) {
      const matchesToDisplay = matches.length <= 5 ? matches : _.slice(matches,0,5);
      await ctx.reply(`ü§ù –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–¥–µ–ª–æ–∫:`);
      await asyncForEach(matchesToDisplay, async (match, idx, arr) => {
        await ctx.reply(`${readableOffer(match.offer) || '–£–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`,
          generateMatchKeyboard({match: match.offer, withBack: idx === arr.length - 1}))
      });
    } else {
      await ctx.reply('–î–ª—è –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–¥–µ–ª–æ–∫ üí∞‚ùå \n–ö–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞–π–¥—É, —Å–æ–æ–±—â—É üê∞', backToMainMenuKeyboard);
      return ctx.scene.leave()
    }
    return ctx.wizard.next()
  },
  async ctx => {
    console.log('matchingWizard2')
    if (isNotValidCB(ctx)) return goHome(ctx);
    const choice = _.get(ctx.update, 'callback_query.data');
    let selection, offerId;
    try {
      const res = JSON.parse(choice) || {};
      selection = res.selection;
      offerId = res.offerId;
    } catch (e) {
      console.log('err parsing JSON in matchingWizard1')
      return goHome(ctx)
    }

    const {matches} = ctx.wizard.state;
    const match = _.find(matches, m => m.offer.id === offerId);
    if (!selection || !offerId || !match) {
      ctx.editMessageText('‚û°Ô∏èüóë', emptyInlineKeyboard).catch(e => console.log('matchingWizard2 editMessageText', e));
      ctx.reply('–°–¥–µ–ª–∫–∞ —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞', backToMainMenuKeyboard).catch(e => console.log('matchingWizard2 reply', e));
      return
    }
    const {offer, myOffer} = match; // his offer
    const {city, rate, userId, username, amount, currency} = offer; // his offer
    const user = getUser(ctx);
    const timestamp = getTimestamp(ctx);
    if (selection === APPROVE_MATCH) {
      const warning = `‚ö†Ô∏è –ó–∞ —Å–∫—É–ø–∫—É, –ø—Ä–æ–¥–∞–∂—É –∏–ª–∏ –æ–±–º–µ–Ω –≤–∞–ª—é—Ç—ã –±–µ–∑ –ª–∏—Ü–µ–Ω–∑–∏–∏ –∏–ª–∏ –≥–æ—Å—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—åÔ∏è`;
      const advice = `üí°–ó–∞–∫–æ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ –æ–±–º–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç: –ø—Ä–æ–¥–∞–≤–µ—Ü –≤–∞–ª—é—Ç—ã —Å–¥–∞–µ—Ç –µ–µ –≤ –∫–∞—Å—Å—É, –∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –ø—Ä–∏–æ–±—Ä–µ—Ç–∞–µ—Ç —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –Ω–µ–≥–æ`;
      const text1 = `–í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–ª–µ–¥—É—é—â—É—é —Å–¥–µ–ª–∫—É:\n\n` + readableOffer(offer)
        + `\n –ö–æ–Ω—Ç–∞–∫—Ç: @${username} \n\n${warning} \n\n ${advice}`;
      await ctx.reply(text1, backToMainMenuKeyboard);
      const text2 = `üéâ –Ø –Ω–∞—à–µ–ª –¥–ª—è –≤–∞—Å —Å–¥–µ–ª–∫—É:\n` + readableOffer(myOffer)
        + `\n –ö–æ–Ω—Ç–∞–∫—Ç: @${_.get(user, 'username')} \n\n${warning} \n\n ${advice}`
      await ctx.editMessageText('üëçüèª', emptyInlineKeyboard);
      acceptMatch({offer, user, timestamp}).catch(e => console.log('failed acceptMatch', match ,e))
      sendTgMsgByChatId({chatId: userId, message: text2}).catch(e => console.log('failed sendTgMsgByChatId', e))
      const cityWord = getCityWord(city);
      const channelText = `üí∞ "–ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞! ${amount} ${currency} –ø–æ –∫—É—Ä—Å—É ${formatRate(rate)} ${currency}-${BYN} –≤ –≥. ${cityWord}"`
      sendTgMsgByChannelName({name: NEWS_TELEGRAM_CHANNEL, message: channelText}).catch(e => console.log('failed sendTgMsgByChannelName', e))
    } else if (selection === REJECT_MATCH) {
      await ctx.editMessageText('‚û°Ô∏èüóë', emptyInlineKeyboard);
      rejectMatch({offer, user, timestamp}).catch(e => console.log('err rejecting a match', e))
    }
  },
  ctx => {
    console.log('matchingWizard3')
    return goHome(ctx)
  }
)

export const chooseCityWizard = new WizardScene(
  "choose_city",
  ctx => {
    console.log('chooseCityWizard1')
    // console.log('ctx',ctx)
    ctx.reply(`–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—Å—è?`,
      citiesWithAddCityMenu
    );
    return ctx.wizard.next();
  },
  async ctx => {
    console.log('chooseCityWizard2')
    if (isNotValidCB(ctx)) {
      if (isValidText(ctx)) {
        const city = getText(ctx);
        await ctx.reply(`–Ø –ø–æ–ø—ã—Ç–∞—é—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –≥–æ—Ä–æ–¥. –≠—Ç–æ –æ–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ ‚è≥`)
        await addNewCity(city)
      }
      return goHome(ctx);
    }
    const city = _.get(ctx.update, 'callback_query.data');
    if (city === SUGGEST_NEW_CITY) {
      ctx.wizard.state.SUGGEST_NEW_CITY = true;
      await ctx.reply(`–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤–∞—à –≥–æ—Ä–æ–¥? üèò`)
    } else {
      const userId = _.get(getUser(ctx), 'id');
      await updateCity({city, userId})
      await ctx.reply(`–û–∫, ${getCityWord(city)} üè°`, backToMainMenuKeyboard)
    }
    return ctx.wizard.next();
  },
  async ctx => {
    const city = getText(ctx);
    const shouldAddNewCity = _.get(ctx.wizard, `state.${SUGGEST_NEW_CITY}`);
    if (shouldAddNewCity) {
      if (city) {
        await ctx.reply(`–Ø –Ω–µ —É–∑–Ω–∞—é –≥–æ—Ä–æ–¥. –Ø –ø–æ–ø—ã—Ç–∞—é—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –≥–æ—Ä–æ–¥. –≠—Ç–æ –æ–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ ‚è≥`)
        await addNewCity(city)
      } else {
        await ctx.reply(`–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫, –¥–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –æ–ø—è—Ç—å`)
        return ctx.scene.enter('choose_city')
      }
    }
    console.log('chooseCityWizard3')
    goHome(ctx)
  }
)

const addNewCity = async city => {
  sendTgMsgByChatId({
    chatId: ADMIN_GROUP_ID,
    message: `Please add the following new city: ${city}`
  }).catch(e => console.log(`err submitting new city - ${city}`, e))
}
